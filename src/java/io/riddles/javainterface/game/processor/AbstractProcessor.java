/*
 * Copyright 2016 riddles.io (developers@riddles.io)
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 *     For the full copyright and license information, please view the LICENSE
 *     file that was distributed with this source code.
 */

package io.riddles.javainterface.game.processor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Logger;

import io.riddles.javainterface.game.player.AbstractPlayer;
import io.riddles.javainterface.game.state.AbstractState;

/**
 * io.riddles.javainterface.game.processor.AbstractProcessor - Created on 6-6-16
 *
 * DO NOT EDIT THIS FILE
 *
 * The processor handles the main game logic. This class should be subclassed and
 * the subclass should implement these methods. Implement anything else here needed
 * to process the game states.
 *
 * This abstract class only stores the players on it's own.
 *
 * @author Jim van Eeden - jim@riddles.io
 */
public abstract class AbstractProcessor<P extends AbstractPlayer, S extends AbstractState> {

    protected final static Logger LOGGER = Logger.getLogger(AbstractProcessor.class.getName());

    protected ArrayList<P> players;
    protected HashMap<String, Integer> configuration;

    public AbstractProcessor(ArrayList<P> players) {
        this.players = players;
    }

    /**
     * @return The players in the game
     */
    public ArrayList<P> getPlayers() {
        return this.players;
    }

    /**
     * Implement this only if there is a pre-game phase, i.e. ask
     * bots where they will place their pieces on the board for the
     * initial state.
     */
    public abstract void preGamePhase();

    /**
     * Play one round of the game. Do anything that is needed here to
     * play the game round (so ask the bots what their moves are). Return
     * the state that will be the state for the next round. So multiple states
     * may be created here if a round constist of multiple states.
     * @param roundNumber The current round number
     * @param state The current state
     * @return The state that will be the start of the next round
     */
    public abstract S playRound(int roundNumber, S state);

    /**
     * The stopping condition for this game.
     * @param state The current state
     * @return True if the game is over, false otherwise
     */
    public abstract boolean hasGameEnded(S state);

    /**
     * Returns the winner of the game
     * @return Null if there is no winner, a player otherwise
     */
    public abstract P getWinner();

    /**
     * @return The current game score
     */
    public abstract double getScore();
}
